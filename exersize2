def reversed_list(lst):
    return lst[::-1]
    """ Переставляет элементы в списке в обратном порядке

    Аргументы:
        - lst:list - список объектов

    Возвращает:
        - list: список, элементы которого находятся в обратном порядке

    Указания:
        - не используйте функцию reverse()
        - авторское решение занимает 16 символов
    """
    pass

def prime_number(num):
    for x in range(2,num):
        if num%x==0:
            return 0
    return 1
    
    """ Возвращает True, если число является простым и False, если число - составное

    Аргументы:
        - num:int - положительное целое число

    Возвращает:
        - bool

    Указания:
        - авторское решение занимает 4 строки
    """
    pass

def longest_word(sentence):
    return max(sentence.split(),key=len)
    """ Находит самое длинное слово в предложении

    Аргументы:
        - sentence:str - предложение

    Возвращает:
        - str: самое длинное слово

    Указания:
        - гарантируется, что в предложении нет знаков препинания
        - гарантируется, что строка не пустая
        - используйте функцию max
        - авторское решение занимает 37 символов
    """
    pass

def is_duplicate(lst):
    #return len(lst) !=len(set(lst))
    if len(lst) ==len(set(lst)):
        return False
    return True
    """ Возвращает True, если в списке есть одинаковые элементы и False, если - нет

    Аргументы:
        - lst:list - список объектов

    Возвращает:
        - bool

    Указания:
        - используйте функцию len
        - все объекты списка хэшируемые
        - авторское решение занимает 32 символа
    """
    pass

def number_conversion(num, base):
    return int(str(num),base)
    """ Переводит число из указанной системы счисления в десятичную

    Аргументы:
        - num:int, str - целое число или строка формата 0b11 или 0x11
        - base:int - основаение системы счисления, в которой задано число num

    Возвращает:
        - int - число в десятичной системе счисления

    Указания:
        - используйте преобразование типов int, str
        - авторское решение занимает 25 символов
    """
    pass

def common_divisor(num1, num2):
    while num2 != 0:
        temp = num2
        num2 = num1 % num2
        num1 = temp
    return num1
    """ Находит наибольший общий делитель

    Аргументы:
        - num1, num2: int - положительные целые числа

    Возвращает:
        - int: наибольший общий делитель

    Указания:
        - авторское решение занимает 8 строк
    """
    pass

def file_overlap(path1, path2):
    with open(path1) as f1:
        with open(path2) as f2:
            return list(set(f1).intersection(set(f2)))
    """ Находит одинаковые строки в файлах

    Аргументы:
        - path1, path2: str - полные пути до файлов. Гарантируются, что файлы существуют

    Возвращает:
        - list: список строк, содержащихся в обоих файлах

    Указания:
        - используйте функцию open, чтобы открыть файл
        - файловый объект - итерируемый. Итерирование происходит по строкам
        - авторское решение занимает 3 строки
        - используйте логические операции для нахождения общих строк
    """
    pass

def sort_modulo(lst):
    return sorted(lst,key=lambda x:abs(x))
    """ Сортирует список целых чисел по модулю

    Аргументы:
        - lst:list - список целых чисел

    Возвращает:
        - list: отсортированный по модулю список

    Указания:
        - используйте встроенную функцию sorted в комбинации с lambda-функцией
        - авторское решение занимает 37 символов
    """
    pass

def list_to_pow(n_begin, n_end, pow):
   
    """ Создайте словарь, ключами которого являются целые числа от n_begin до n_end включительно,
        а значение - это число, возведенное в целую степень.
        Например, для n_begin = 1, n_end = 4, pow = 2
        результат выглядит следующим образом {1: 1, 2: 4, 3: 9, 4: 16}.
    
    Аргументы: d={}
    while n_begin!=n_end:
        d[n_begin]=n_begin**2
    return d
        - n_begin:int - начальное целое число
        - n_end:int - конечное целое число
        - pow:int - степень, в которую необходимо возвести числа
    
    Возвращает:
        - dict

    Указания: 
        - авторское решение занимает 51 символ
    """
    pass

def numbers_sum():
    s=input()
    return sum(int(x) for x in s.split(',')) if s else 0
    """ Запрашивает список целых чисел через стандартный поток в формате
        "n1, n2, n3, ... ni", i >= 0, и считает их сумму

    Аргументы: отсутствуют

    Возвращает:
        - int: сумма целых чисел

    Указания:
        - гарантируется, что вводятся корректные данные
        - обратите внимание на случаи, когда вход подается 0 и 1 число
        - используйте функцию input и метод split типа str
        - используйте оператор in для поиска по строке
        - авторское решение занимает 7 строк
    """
    pass
